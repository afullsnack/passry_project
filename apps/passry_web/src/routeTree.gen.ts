/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DiscoverRouteImport } from './routes/discover'
import { Route as AuthedRouteRouteImport } from './routes/_authed/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthedTeamRouteImport } from './routes/_authed/team'
import { Route as AuthedStatsRouteImport } from './routes/_authed/stats'
import { Route as AuthedExploreRouteImport } from './routes/_authed/explore'
import { Route as AuthedEventsRouteImport } from './routes/_authed/events'
import { Route as AuthedAnalyticsRouteImport } from './routes/_authed/analytics'
import { Route as AuthVerify_codeRouteImport } from './routes/_auth/verify_code'
import { Route as AuthSignupRouteImport } from './routes/_auth/signup'
import { Route as AuthLoginRouteImport } from './routes/_auth/login'
import { Route as AuthedEventsIndexRouteImport } from './routes/_authed/events.index'
import { Route as AuthedEventsNewRouteImport } from './routes/_authed/events.new'
import { Route as AuthedEventsIdRouteImport } from './routes/_authed/events.$id'
import { Route as AuthedEIdRouteImport } from './routes/_authed/e/$id'

const DiscoverRoute = DiscoverRouteImport.update({
  id: '/discover',
  path: '/discover',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedRouteRoute = AuthedRouteRouteImport.update({
  id: '/_authed',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedTeamRoute = AuthedTeamRouteImport.update({
  id: '/team',
  path: '/team',
  getParentRoute: () => AuthedRouteRoute,
} as any)
const AuthedStatsRoute = AuthedStatsRouteImport.update({
  id: '/stats',
  path: '/stats',
  getParentRoute: () => AuthedRouteRoute,
} as any)
const AuthedExploreRoute = AuthedExploreRouteImport.update({
  id: '/explore',
  path: '/explore',
  getParentRoute: () => AuthedRouteRoute,
} as any)
const AuthedEventsRoute = AuthedEventsRouteImport.update({
  id: '/events',
  path: '/events',
  getParentRoute: () => AuthedRouteRoute,
} as any)
const AuthedAnalyticsRoute = AuthedAnalyticsRouteImport.update({
  id: '/analytics',
  path: '/analytics',
  getParentRoute: () => AuthedRouteRoute,
} as any)
const AuthVerify_codeRoute = AuthVerify_codeRouteImport.update({
  id: '/_auth/verify_code',
  path: '/verify_code',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSignupRoute = AuthSignupRouteImport.update({
  id: '/_auth/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/_auth/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedEventsIndexRoute = AuthedEventsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthedEventsRoute,
} as any)
const AuthedEventsNewRoute = AuthedEventsNewRouteImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => AuthedEventsRoute,
} as any)
const AuthedEventsIdRoute = AuthedEventsIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => AuthedEventsRoute,
} as any)
const AuthedEIdRoute = AuthedEIdRouteImport.update({
  id: '/e/$id',
  path: '/e/$id',
  getParentRoute: () => AuthedRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/discover': typeof DiscoverRoute
  '/login': typeof AuthLoginRoute
  '/signup': typeof AuthSignupRoute
  '/verify_code': typeof AuthVerify_codeRoute
  '/analytics': typeof AuthedAnalyticsRoute
  '/events': typeof AuthedEventsRouteWithChildren
  '/explore': typeof AuthedExploreRoute
  '/stats': typeof AuthedStatsRoute
  '/team': typeof AuthedTeamRoute
  '/e/$id': typeof AuthedEIdRoute
  '/events/$id': typeof AuthedEventsIdRoute
  '/events/new': typeof AuthedEventsNewRoute
  '/events/': typeof AuthedEventsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/discover': typeof DiscoverRoute
  '/login': typeof AuthLoginRoute
  '/signup': typeof AuthSignupRoute
  '/verify_code': typeof AuthVerify_codeRoute
  '/analytics': typeof AuthedAnalyticsRoute
  '/explore': typeof AuthedExploreRoute
  '/stats': typeof AuthedStatsRoute
  '/team': typeof AuthedTeamRoute
  '/e/$id': typeof AuthedEIdRoute
  '/events/$id': typeof AuthedEventsIdRoute
  '/events/new': typeof AuthedEventsNewRoute
  '/events': typeof AuthedEventsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authed': typeof AuthedRouteRouteWithChildren
  '/discover': typeof DiscoverRoute
  '/_auth/login': typeof AuthLoginRoute
  '/_auth/signup': typeof AuthSignupRoute
  '/_auth/verify_code': typeof AuthVerify_codeRoute
  '/_authed/analytics': typeof AuthedAnalyticsRoute
  '/_authed/events': typeof AuthedEventsRouteWithChildren
  '/_authed/explore': typeof AuthedExploreRoute
  '/_authed/stats': typeof AuthedStatsRoute
  '/_authed/team': typeof AuthedTeamRoute
  '/_authed/e/$id': typeof AuthedEIdRoute
  '/_authed/events/$id': typeof AuthedEventsIdRoute
  '/_authed/events/new': typeof AuthedEventsNewRoute
  '/_authed/events/': typeof AuthedEventsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/discover'
    | '/login'
    | '/signup'
    | '/verify_code'
    | '/analytics'
    | '/events'
    | '/explore'
    | '/stats'
    | '/team'
    | '/e/$id'
    | '/events/$id'
    | '/events/new'
    | '/events/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/discover'
    | '/login'
    | '/signup'
    | '/verify_code'
    | '/analytics'
    | '/explore'
    | '/stats'
    | '/team'
    | '/e/$id'
    | '/events/$id'
    | '/events/new'
    | '/events'
  id:
    | '__root__'
    | '/'
    | '/_authed'
    | '/discover'
    | '/_auth/login'
    | '/_auth/signup'
    | '/_auth/verify_code'
    | '/_authed/analytics'
    | '/_authed/events'
    | '/_authed/explore'
    | '/_authed/stats'
    | '/_authed/team'
    | '/_authed/e/$id'
    | '/_authed/events/$id'
    | '/_authed/events/new'
    | '/_authed/events/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthedRouteRoute: typeof AuthedRouteRouteWithChildren
  DiscoverRoute: typeof DiscoverRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthSignupRoute: typeof AuthSignupRoute
  AuthVerify_codeRoute: typeof AuthVerify_codeRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/discover': {
      id: '/discover'
      path: '/discover'
      fullPath: '/discover'
      preLoaderRoute: typeof DiscoverRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed/team': {
      id: '/_authed/team'
      path: '/team'
      fullPath: '/team'
      preLoaderRoute: typeof AuthedTeamRouteImport
      parentRoute: typeof AuthedRouteRoute
    }
    '/_authed/stats': {
      id: '/_authed/stats'
      path: '/stats'
      fullPath: '/stats'
      preLoaderRoute: typeof AuthedStatsRouteImport
      parentRoute: typeof AuthedRouteRoute
    }
    '/_authed/explore': {
      id: '/_authed/explore'
      path: '/explore'
      fullPath: '/explore'
      preLoaderRoute: typeof AuthedExploreRouteImport
      parentRoute: typeof AuthedRouteRoute
    }
    '/_authed/events': {
      id: '/_authed/events'
      path: '/events'
      fullPath: '/events'
      preLoaderRoute: typeof AuthedEventsRouteImport
      parentRoute: typeof AuthedRouteRoute
    }
    '/_authed/analytics': {
      id: '/_authed/analytics'
      path: '/analytics'
      fullPath: '/analytics'
      preLoaderRoute: typeof AuthedAnalyticsRouteImport
      parentRoute: typeof AuthedRouteRoute
    }
    '/_auth/verify_code': {
      id: '/_auth/verify_code'
      path: '/verify_code'
      fullPath: '/verify_code'
      preLoaderRoute: typeof AuthVerify_codeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/signup': {
      id: '/_auth/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof AuthSignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed/events/': {
      id: '/_authed/events/'
      path: '/'
      fullPath: '/events/'
      preLoaderRoute: typeof AuthedEventsIndexRouteImport
      parentRoute: typeof AuthedEventsRoute
    }
    '/_authed/events/new': {
      id: '/_authed/events/new'
      path: '/new'
      fullPath: '/events/new'
      preLoaderRoute: typeof AuthedEventsNewRouteImport
      parentRoute: typeof AuthedEventsRoute
    }
    '/_authed/events/$id': {
      id: '/_authed/events/$id'
      path: '/$id'
      fullPath: '/events/$id'
      preLoaderRoute: typeof AuthedEventsIdRouteImport
      parentRoute: typeof AuthedEventsRoute
    }
    '/_authed/e/$id': {
      id: '/_authed/e/$id'
      path: '/e/$id'
      fullPath: '/e/$id'
      preLoaderRoute: typeof AuthedEIdRouteImport
      parentRoute: typeof AuthedRouteRoute
    }
  }
}

interface AuthedEventsRouteChildren {
  AuthedEventsIdRoute: typeof AuthedEventsIdRoute
  AuthedEventsNewRoute: typeof AuthedEventsNewRoute
  AuthedEventsIndexRoute: typeof AuthedEventsIndexRoute
}

const AuthedEventsRouteChildren: AuthedEventsRouteChildren = {
  AuthedEventsIdRoute: AuthedEventsIdRoute,
  AuthedEventsNewRoute: AuthedEventsNewRoute,
  AuthedEventsIndexRoute: AuthedEventsIndexRoute,
}

const AuthedEventsRouteWithChildren = AuthedEventsRoute._addFileChildren(
  AuthedEventsRouteChildren,
)

interface AuthedRouteRouteChildren {
  AuthedAnalyticsRoute: typeof AuthedAnalyticsRoute
  AuthedEventsRoute: typeof AuthedEventsRouteWithChildren
  AuthedExploreRoute: typeof AuthedExploreRoute
  AuthedStatsRoute: typeof AuthedStatsRoute
  AuthedTeamRoute: typeof AuthedTeamRoute
  AuthedEIdRoute: typeof AuthedEIdRoute
}

const AuthedRouteRouteChildren: AuthedRouteRouteChildren = {
  AuthedAnalyticsRoute: AuthedAnalyticsRoute,
  AuthedEventsRoute: AuthedEventsRouteWithChildren,
  AuthedExploreRoute: AuthedExploreRoute,
  AuthedStatsRoute: AuthedStatsRoute,
  AuthedTeamRoute: AuthedTeamRoute,
  AuthedEIdRoute: AuthedEIdRoute,
}

const AuthedRouteRouteWithChildren = AuthedRouteRoute._addFileChildren(
  AuthedRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthedRouteRoute: AuthedRouteRouteWithChildren,
  DiscoverRoute: DiscoverRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthSignupRoute: AuthSignupRoute,
  AuthVerify_codeRoute: AuthVerify_codeRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
